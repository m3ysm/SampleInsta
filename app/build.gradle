plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}
androidExtensions { experimental = true }

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.sample"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode generateVersionCode()
        versionName generateVersionName()
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //Generating APK wth meaningful name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "Sample Insta"
            def SEP = "_"
            def buildType = variant.buildType.name
            def version = variant.versionName
            def date = new Date()
            def formattedDate = date.format('yyyy-MM-dd-HH-mm-ssZ')
            def apkName = project + SEP + buildType + SEP + version + SEP + formattedDate + ".apk"
            outputFileName = new File(apkName)
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //Navigation for Fragment
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    // For Kotlin use navigation-fragment-ktx
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    // For Kotlin use navigation-ui-ktx
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpLoggingInterceptorVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    //RxJava for reactive and multithreaded application
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    // TODO: use a newer version for shape of view, 1.4.7 has bugs so I did not proceed with it
    implementation "com.github.florent37:shapeofview:$shapeOfView"
    //Koin
    implementation "org.koin:koin-core:$koin"
    implementation "org.koin:koin-android:$koin"
    implementation "org.koin:koin-android-viewmodel:$koin"
    //Preference
    implementation "androidx.preference:preference-ktx:$preference"
    //Timber Logger
    implementation "com.jakewharton.timber:timber:$timber"
    //Finding memory leaks by leak canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    //Logging API requests
    debugImplementation "com.readystatesoftware.chuck:library:$chuckVersiosn"
    releaseImplementation "com.readystatesoftware.chuck:library-no-op:$chuckVersiosn"
    // Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"
    //test
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"
    testImplementation "org.koin:koin-test:2.1.6"
    testImplementation "org.mockito:mockito-inline:3.0.0"
    testImplementation "android.arch.core:core-testing:1.1.1"
    androidTestImplementation "android.arch.core:core-testing:1.1.1"
    androidTestImplementation 'org.mockito:mockito-android:3.0.0'
    androidTestImplementation "org.koin:koin-test:2.1.6"
    // fragment
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
}

//Generating a version code automatically for incremental release
private Integer generateVersionCode() {
    return minimumSdkVersion * 100000000 +
            minimumScreenSize * 10000000 +
            maximumScreenSize * 1000000 +
            versionMajor * 10000 +
            versionMinor * 100 +
            versionPatch
}

//Generating a meaningful version name automatically
private String generateVersionName() {
    String versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    if (versionClassifier == null) {
        if (isSnapshot) {
            ext.versionClassifier = "SNAPSHOT"
        }
    }
    if (versionClassifier != null) {
        versionName += "-" + versionClassifier
    }
    return versionName
}